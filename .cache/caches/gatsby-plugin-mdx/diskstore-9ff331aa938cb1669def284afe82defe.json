{"expireTime":9007200846044420000,"key":"gatsby-plugin-mdx-entire-payload-c3ba837cd07fd6a0d6971a0cee9838dd-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-page/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":125,"offset":126},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":128},"end":{"line":5,"column":29,"offset":156},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Grid","position":{"start":{"line":8,"column":3,"offset":161},"end":{"line":8,"column":7,"offset":165},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":159},"end":{"line":8,"column":7,"offset":165},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Overview","position":{"start":{"line":10,"column":5,"offset":171},"end":{"line":10,"column":13,"offset":179},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":167},"end":{"line":10,"column":13,"offset":179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Grid is a control that contains a list organized by columns, where each column can receive an individual size and an alignment.","position":{"start":{"line":12,"column":1,"offset":181},"end":{"line":12,"column":128,"offset":308},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":181},"end":{"line":12,"column":128,"offset":308},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Source Code","position":{"start":{"line":14,"column":5,"offset":314},"end":{"line":14,"column":16,"offset":325},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":310},"end":{"line":14,"column":16,"offset":325},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"import totalcross.sys.Settings;\nimport totalcross.ui.Button;\nimport totalcross.ui.Grid;\nimport totalcross.ui.MainWindow;\nimport totalcross.ui.dialog.MessageBox;\nimport totalcross.util.UnitsConverter;\nimport java.util.ArrayList;\n\npublic class GridSample extends MainWindow {\n\n    private final int H = 225;\n    private ArrayList<User> users = new ArrayList<>();\n    private Grid grid;\n    private Button loadButton;\n    private int GAP = UnitsConverter.toPixels(DP + 8);\n\n    public GridSample(){\n        setUIStyle(Settings.Material);\n    }\n\n    @Override\n    public void initUI() {\n        String[] gridCaptions = { \"Name\", \"Phone\", \"Email\" };\n        int gridWidths[] = { -35, -35, -30 };\n        int gridAligns[] = { LEFT, LEFT, LEFT };\n\n        grid = new Grid(gridCaptions, gridWidths, gridAligns, false);\n        grid.verticalLineStyle = Grid.VERT_LINE;\n\n        loadButton = new Button(\"Load\");\n\n        add(grid, LEFT + GAP, TOP + GAP, FILL - GAP, FILL - GAP * 9);\n        add(loadButton, LEFT + GAP, BOTTOM - GAP, FILL - GAP, PREFERRED);\n\n        loadButton.addPressListener( e -> {\n\n            for (int i = 0; i < 5; i++) {\n                users.add(new User(\"Joao \",\"99999999\",\"joao@j.com\",\"12345678\"));\n            }\n\n            if (users.size() > 0) {\n                String items[][] = new String[users.size()][3];\n                for (int i = 0; i < users.size(); i++) {\n                    User user = users.get(i);\n                    items[i] = new String[] { user.getName(), user.getPhone(), user.getMail() };\n                }\n                grid.setItems(items);\n            } else {\n                MessageBox mb = new MessageBox(\"Message\", \"No registered users.\", new String[] { \"Close\" });\n                mb.popup();\n            }\n        });\n    }\n\n    public class User {\n\n        private String name;\n        private String phone;\n        private String mail;\n        private String password;\n\n        public User() {\n\n        }\n\n        public User(String name, String phone, String mail, String password) {\n            this.name = name;\n            this.phone = phone;\n            this.mail = mail;\n            this.password = password;\n        }\n\n        public String getName() {\n            return name;\n        }\n        public void setName(String name) {\n            this.name = name;\n        }\n        public String getPhone() {\n            return phone;\n        }\n        public void setPhone(String phone) {\n            this.phone = phone;\n        }\n        public String getMail() {\n            return mail;\n        }\n        public void setMail(String mail) {\n            this.mail = mail;\n        }\n        public String getPassword() {\n            return password;\n        }\n        public void setPassword(String password) {\n            this.password = password;\n        }\n\n    }\n}\n\n","position":{"start":{"line":16,"column":1,"offset":327},"end":{"line":118,"column":4,"offset":3168},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Methods","position":{"start":{"line":120,"column":5,"offset":3174},"end":{"line":120,"column":12,"offset":3181},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":3170},"end":{"line":120,"column":12,"offset":3181},"indent":[]}},{"type":"jsx","value":"<table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\">Type</th>\n      <th style=\"text-align:left\">Name</th>\n      <th style=\"text-align:left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align:left\"><b>Constructor</b>\n      </td>\n      <td style=\"text-align:left\">Grid(String[] captions, int[] widths, int[] aligns, boolean checkEnabled)</td>\n      <td\n      style=\"text-align:left\">\n        <p>Captions for the columns. Cannot be null;</p>\n        <p></p>\n        <p>Widths of the columns. If the total width is less than the grid&apos;s\n          width,\n          <br />the last column will fill until the grid width;</p>\n        <p></p>\n        <p>Alignment of information on the given column;</p>\n        <p></p>\n        <p>checkEnabled is True if you want the multi-selection check column;</p>\n        <p></p>\n        </td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Constructor</b>\n      </td>\n      <td style=\"text-align:left\">Grid(String[] captions, boolean checkEnabled)</td>\n      <td style=\"text-align:left\">\n        <p>Captions for the columns;\n          <br />checkEnabled is True if you want the multi-selection check column;</p>\n        <p></p>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Void</b>\n      </td>\n      <td style=\"text-align:left\">setItems(String[][] items)</td>\n      <td style=\"text-align:left\">Sets the grid items to be displayed.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Void</b>\n      </td>\n      <td style=\"text-align:left\">setDataSource(DataSource ds, int nrItems)</td>\n      <td style=\"text-align:left\">Sets the data source of this grid to be the given one.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Void</b>\n      </td>\n      <td style=\"text-align:left\">add(String[] item)</td>\n      <td style=\"text-align:left\">Add a new line.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Void</b>\n      </td>\n      <td style=\"text-align:left\">add(String[] item, int row)</td>\n      <td style=\"text-align:left\">Add a new line at the given index position of the grid.</td>\n    </tr>\n  </tbody>\n</table>â€Œ","position":{"start":{"line":122,"column":1,"offset":3183},"end":{"line":184,"column":10,"offset":5339},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"References","position":{"start":{"line":186,"column":5,"offset":5345},"end":{"line":186,"column":15,"offset":5355},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":5341},"end":{"line":186,"column":15,"offset":5355},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"See the ","position":{"start":{"line":188,"column":3,"offset":5359},"end":{"line":188,"column":11,"offset":5367},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/TotalCross/TCSample/blob/master/src/main/java/totalcross/sample/components/ui/GridSample.java","children":[{"type":"text","value":"github","position":{"start":{"line":188,"column":12,"offset":5368},"end":{"line":188,"column":18,"offset":5374},"indent":[]}}],"position":{"start":{"line":188,"column":11,"offset":5367},"end":{"line":188,"column":133,"offset":5489},"indent":[]}},{"type":"text","value":" sample.","position":{"start":{"line":188,"column":133,"offset":5489},"end":{"line":188,"column":141,"offset":5497},"indent":[]}}],"position":{"start":{"line":188,"column":3,"offset":5359},"end":{"line":188,"column":141,"offset":5497},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":5357},"end":{"line":188,"column":141,"offset":5497},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"See the ","position":{"start":{"line":189,"column":3,"offset":5500},"end":{"line":189,"column":11,"offset":5508},"indent":[]}},{"type":"link","title":null,"url":"https://rs.totalcross.com/doc/totalcross/ui/Grid.html","children":[{"type":"text","value":"Java Docs","position":{"start":{"line":189,"column":12,"offset":5509},"end":{"line":189,"column":21,"offset":5518},"indent":[]}}],"position":{"start":{"line":189,"column":11,"offset":5508},"end":{"line":189,"column":77,"offset":5574},"indent":[]}},{"type":"text","value":" for more information.","position":{"start":{"line":189,"column":77,"offset":5574},"end":{"line":189,"column":99,"offset":5596},"indent":[]}}],"position":{"start":{"line":189,"column":3,"offset":5500},"end":{"line":189,"column":99,"offset":5596},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":5498},"end":{"line":189,"column":99,"offset":5596},"indent":[]}}],"position":{"start":{"line":188,"column":1,"offset":5357},"end":{"line":189,"column":99,"offset":5596},"indent":[1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":192,"column":1,"offset":5599},"end":{"line":192,"column":31,"offset":5629},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":192,"column":31,"offset":5629}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-page/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"grid\"\n    }}>{`Grid`}</h1>\n    <h3 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h3>\n    <p>{`Grid is a control that contains a list organized by columns, where each column can receive an individual size and an alignment.`}</p>\n    <h3 {...{\n      \"id\": \"source-code\"\n    }}>{`Source Code`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import totalcross.sys.Settings;\nimport totalcross.ui.Button;\nimport totalcross.ui.Grid;\nimport totalcross.ui.MainWindow;\nimport totalcross.ui.dialog.MessageBox;\nimport totalcross.util.UnitsConverter;\nimport java.util.ArrayList;\n\npublic class GridSample extends MainWindow {\n\n    private final int H = 225;\n    private ArrayList<User> users = new ArrayList<>();\n    private Grid grid;\n    private Button loadButton;\n    private int GAP = UnitsConverter.toPixels(DP + 8);\n\n    public GridSample(){\n        setUIStyle(Settings.Material);\n    }\n\n    @Override\n    public void initUI() {\n        String[] gridCaptions = { \"Name\", \"Phone\", \"Email\" };\n        int gridWidths[] = { -35, -35, -30 };\n        int gridAligns[] = { LEFT, LEFT, LEFT };\n\n        grid = new Grid(gridCaptions, gridWidths, gridAligns, false);\n        grid.verticalLineStyle = Grid.VERT_LINE;\n\n        loadButton = new Button(\"Load\");\n\n        add(grid, LEFT + GAP, TOP + GAP, FILL - GAP, FILL - GAP * 9);\n        add(loadButton, LEFT + GAP, BOTTOM - GAP, FILL - GAP, PREFERRED);\n\n        loadButton.addPressListener( e -> {\n\n            for (int i = 0; i < 5; i++) {\n                users.add(new User(\"Joao \",\"99999999\",\"joao@j.com\",\"12345678\"));\n            }\n\n            if (users.size() > 0) {\n                String items[][] = new String[users.size()][3];\n                for (int i = 0; i < users.size(); i++) {\n                    User user = users.get(i);\n                    items[i] = new String[] { user.getName(), user.getPhone(), user.getMail() };\n                }\n                grid.setItems(items);\n            } else {\n                MessageBox mb = new MessageBox(\"Message\", \"No registered users.\", new String[] { \"Close\" });\n                mb.popup();\n            }\n        });\n    }\n\n    public class User {\n\n        private String name;\n        private String phone;\n        private String mail;\n        private String password;\n\n        public User() {\n\n        }\n\n        public User(String name, String phone, String mail, String password) {\n            this.name = name;\n            this.phone = phone;\n            this.mail = mail;\n            this.password = password;\n        }\n\n        public String getName() {\n            return name;\n        }\n        public void setName(String name) {\n            this.name = name;\n        }\n        public String getPhone() {\n            return phone;\n        }\n        public void setPhone(String phone) {\n            this.phone = phone;\n        }\n        public String getMail() {\n            return mail;\n        }\n        public void setMail(String mail) {\n            this.mail = mail;\n        }\n        public String getPassword() {\n            return password;\n        }\n        public void setPassword(String password) {\n            this.password = password;\n        }\n\n    }\n}\n\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <table>\n  <thead>\n    <tr>\n      <th style=\"text-align:left\">Type</th>\n      <th style=\"text-align:left\">Name</th>\n      <th style=\"text-align:left\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align:left\"><b>Constructor</b>\n      </td>\n      <td style=\"text-align:left\">Grid(String[] captions, int[] widths, int[] aligns, boolean checkEnabled)</td>\n      <td style=\"text-align:left\">\n        <p>Captions for the columns. Cannot be null;</p>\n        <p></p>\n        <p>Widths of the columns. If the total width is less than the grid&apos;s\n          width,\n          <br />the last column will fill until the grid width;</p>\n        <p></p>\n        <p>Alignment of information on the given column;</p>\n        <p></p>\n        <p>checkEnabled is True if you want the multi-selection check column;</p>\n        <p></p>\n        </td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Constructor</b>\n      </td>\n      <td style=\"text-align:left\">Grid(String[] captions, boolean checkEnabled)</td>\n      <td style=\"text-align:left\">\n        <p>Captions for the columns;\n          <br />checkEnabled is True if you want the multi-selection check column;</p>\n        <p></p>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Void</b>\n      </td>\n      <td style=\"text-align:left\">setItems(String[][] items)</td>\n      <td style=\"text-align:left\">Sets the grid items to be displayed.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Void</b>\n      </td>\n      <td style=\"text-align:left\">setDataSource(DataSource ds, int nrItems)</td>\n      <td style=\"text-align:left\">Sets the data source of this grid to be the given one.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Void</b>\n      </td>\n      <td style=\"text-align:left\">add(String[] item)</td>\n      <td style=\"text-align:left\">Add a new line.</td>\n    </tr>\n    <tr>\n      <td style=\"text-align:left\"><b>Void</b>\n      </td>\n      <td style=\"text-align:left\">add(String[] item, int row)</td>\n      <td style=\"text-align:left\">Add a new line at the given index position of the grid.</td>\n    </tr>\n  </tbody>\n    </table>â€Œ\n    <h3 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`See the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/TotalCross/TCSample/blob/master/src/main/java/totalcross/sample/components/ui/GridSample.java\"\n        }}>{`github`}</a>{` sample.`}</li>\n      <li parentName=\"ul\">{`See the `}<a parentName=\"li\" {...{\n          \"href\": \"https://rs.totalcross.com/doc/totalcross/ui/Grid.html\"\n        }}>{`Java Docs`}</a>{` for more information.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}